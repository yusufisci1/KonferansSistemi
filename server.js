require("dotenv").config();
const express = require("express");
const http = require("http");
const socketIo = require("socket.io");
const mongoose = require("./config/db");
const userRoutes = require("./routes/userRoutes"); // KullanÄ±cÄ± rotalarÄ±nÄ± ekledik

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: { origin: "*", methods: ["GET", "POST"] },
});

app.use(express.json()); // JSON formatÄ±nda gelen verileri okuyabilmek iÃ§in
app.use(express.static("public")); // Public klasÃ¶rÃ¼nÃ¼ aÃ§

// KullanÄ±cÄ± GiriÅŸ API
app.use("/api/users", userRoutes);

app.get("/", (req, res) => {
  res.send("Konferans Sistemi API Ã‡alÄ±ÅŸÄ±yor!");
});

let isMeetingStarted = false;  //ToplantÄ±
let isAttendanceStarted = false; //Yoklama
let isVotingStarted = false; //Oylama

let hasRequestedToSpeak = {}; // SÃ¶z isteyen kullanÄ±cÄ±larÄ± takip et
let hasJoinedAttendance = {}; // Yoklamaya katÄ±lanlarÄ± takip et
let hasJoinedMeeting = {}; // ToplantÄ±ya katÄ±lanlarÄ± takip et
let hasVoted = {};

io.on("connection", (socket) => {
    console.log("Bir kullanÄ±cÄ± baÄŸlandÄ±.");

    // Yeni baÄŸlanan kullanÄ±cÄ±ya mevcut oturum durumlarÄ±nÄ± bildir
    if (isMeetingStarted) {
        socket.emit("meetingStarted");
    }
    if (isAttendanceStarted) {
        socket.emit("attendanceStarted");
    }
    if (isVotingStarted) {
        socket.emit("votingStarted");
    }

    socket.on("startMeeting", () => {
        console.log("ToplantÄ± baÅŸladÄ±!");
        io.emit("meetingStarted");
        isMeetingStarted = true;
    });

    socket.on("startAttendance", () => {
        console.log("Yoklama baÅŸladÄ±!");
        io.emit("attendanceStarted");
        isAttendanceStarted = true;
    });

    socket.on("startVoting", () => {
        console.log("Oylama baÅŸladÄ±!");
        io.emit("votingStarted");
        isVotingStarted = true;
    });

    // SÃ¶z isteme
    socket.on("requestToSpeak", (username) => {
        if (!isMeetingStarted) {
            socket.emit("errorMessage", "ToplantÄ± baÅŸlamadÄ±!");
            return;
        }
        if (hasRequestedToSpeak[username]) {
            socket.emit("errorMessage", "Zaten sÃ¶z istediniz, bekleyin!");
            return;
        }
        hasRequestedToSpeak[username] = true; // KullanÄ±cÄ±ya sÃ¶z hakkÄ± isteme kaydÄ± ekle
        console.log(`${username} sÃ¶z istedi.`);
        io.emit("newRequest", { username });
    });

    // Yoklama katÄ±lÄ±mÄ±
    socket.on("attendance", (username) => {
        if (!isAttendanceStarted) {
            socket.emit("errorMessage", "Yoklama baÅŸlamadÄ±!");
            return;
        }
        if (hasJoinedAttendance[username]) {
            socket.emit("errorMessage", "Zaten yoklamaya katÄ±ldÄ±nÄ±z!");
            return;
        }
        hasJoinedAttendance[username] = true;
        console.log(`${username} yoklamaya katÄ±ldÄ±.`);
        io.emit("attendanceMarked", { username });
    });

    // ToplantÄ±ya katÄ±lÄ±m
    socket.on("joinMeeting", (username) => {
        if (!isMeetingStarted) {
            socket.emit("errorMessage", "ToplantÄ± baÅŸlamadÄ±!");
            return;
        }
        if (hasJoinedMeeting[username]) {
            socket.emit("errorMessage", "Zaten toplantÄ±ya katÄ±ldÄ±nÄ±z!");
            return;
        }
        hasJoinedMeeting[username] = true;
        console.log(`${username} toplantÄ±ya katÄ±ldÄ±.`);
        io.emit("meetingJoined", { username });
    });

    // Oylama
    socket.on("vote", (username, choice) => {
        if (!isVotingStarted) {
            socket.emit("errorMessage", "Oylama baÅŸlamadÄ±!");
            return;
        }
        if (hasVoted[username]) {
            socket.emit("errorMessage", "Zaten oy kullandÄ±nÄ±z!");
            return;
        }
        hasVoted[username] = true;
        console.log(`${username} oylamada ${choice} dedi.`);
        io.emit("voteResult", { username, choice });
    });

    socket.on("approveRequest", (username) => {
        console.log(`${username} sÃ¶z hakkÄ± onaylandÄ±.`);
        hasRequestedToSpeak[username] = false;
        io.emit("requestApproved", { username });
        
      });

    
    socket.on("disconnect", () => {
        console.log("Bir kullanÄ±cÄ± ayrÄ±ldÄ±.");
    });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => console.log(`ğŸš€ Server ${PORT} portunda Ã§alÄ±ÅŸÄ±yor!`));